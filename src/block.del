/*
code about block state
*/

/* 
the following 3 variables is used in tracking status of the player
if we add different heroes eventually, there deflecting or blocking state number may be different
the 3 variables can be access by the method with the same name
*/
define playervar isDeflecting; // is player deflecting
define playervar isBlocking; // is player blocking
define playervar isIdle; // is player in idle

define playervar deflectingSucceedCount = 0;

macro IsDeflecting(define player): player.isDeflecting == true;

macro IsBlocking(define player): player.isBlocking == true;

macro IsIdle(define player): player.isIdle == true;

macro DeflectSucceedCount(define player): player.deflectingSucceedCount;

method OnIdle()
{
    isIdle = true;
}

method OffIdle()
{
    isIdle = false;
}

method OnDeflecting()
{
    isDeflecting = true;
    PlayEffect(AllPlayers(), PlayEffect.GoodExplosion, Color.Blue, EventPlayer(), 2);
    PlayEffect(AllPlayers(), PlayEffect.DebuffImpactSound, Color.White, EventPlayer(), 30);

    deflectingSucceedCount = 0;
}

method OffDeflecting()
{
    isDeflecting = false;
}

method OnSucceedDeflecting(define player)
{
    player.deflectingSucceedCount += 1;
}


define playervar blockingAnimation = 0;
define playervar blockingEffect;

rule: "create blocking effect"
Event.OngoingPlayer
{
    // change radius instead create and destroy effect
    CreateEffect(AllPlayers(), Effect.Sphere, Color.SkyBlue, EventPlayer(), blockingAnimation, EffectRev.VisibleToPositionAndRadius);
    blockingEffect = LastCreatedEntity();
}

rule: "destroy effect when leave"
Event.OnPlayerLeave
{
    DestroyEffect(blockingEffect);
}

method OnBlocking()
{
    isBlocking = true;

    blockingAnimation = 1.5;
}

method OffBlocking()
{
    isBlocking = false;

    blockingAnimation = 0;
}