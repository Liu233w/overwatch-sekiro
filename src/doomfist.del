/*
The state machine of doomfist
*/

import "block.del";
import "debug.del";
import "posture.del";
import "optimise.del";

define playervar currentStateDoomfist = 0; // current state number in state machine
define playervar stateInitedDoomfist = false; // is state init code executed

rule: "Initialize doomfist" // if player switch a hero, the init code in main.del may not work
Event.OngoingPlayer
Player.Doomfist
{
    ContinueWhenServerLoadAcceptable();

    SetUltimateAbilityEnabled(EventPlayer(), false);
    SetPrimaryFireEnabled(EventPlayer(), false);

    SetDamageDealt(EventPlayer(), 100);

    ContinueWhenServerLoadAcceptable();

    SetSecondaryFireEnabled(EventPlayer(), true);
    SetAbility1Enabled(EventPlayer(), true);
    SetAbility2Enabled(EventPlayer(), true);
}

rule: "set state to 1 when spawned"
Event.OngoingPlayer
Player.Doomfist
if (IsAlive(EventPlayer()))
if (currentStateDoomfist == 0)
if (stateInitedDoomfist == false)
{
    ContinueWhenServerLoadAcceptable();
    currentStateDoomfist = 1;
}

rule: "set state to 0 when dead"
Event.OnDeath
Player.Doomfist
{
    OffIdle();
    currentStateDoomfist = 0;
    stateInitedDoomfist = false;
}

// ============== state initialize code ====================

rule: "state 1: idle"
Event.OngoingPlayer
Player.Doomfist
if (currentStateDoomfist == 1)
if (stateInitedDoomfist == false)
{
    OnIdle();
    stateInitedDoomfist = true;
}

rule: "state 2: stunned"
Event.OngoingPlayer
Player.Doomfist
if (currentStateDoomfist == 2)
if (stateInitedDoomfist == false)
{
    OffDeflecting();
    OffBlocking();
    stateInitedDoomfist = true;
}

rule: "state 11: deflecting"
Event.OngoingPlayer
Player.Doomfist
if (currentStateDoomfist == 11)
if (stateInitedDoomfist == false)
{
    OnDeflecting();
    stateInitedDoomfist = true;
}

rule: "state 12: blocking"
Event.OngoingPlayer
Player.Doomfist
if (currentStateDoomfist == 12)
if (stateInitedDoomfist == false)
{
    OffDeflecting();
    OnBlocking();
    stateInitedDoomfist = true;
}

rule: "state 13: deflecting cooling down"
Event.OngoingPlayer
Player.Doomfist
if (currentStateDoomfist == 13)
if (stateInitedDoomfist == false)
{
    stateInitedDoomfist = true;
}

rule: "state 14: blocking cooling down"
Event.OngoingPlayer
Player.Doomfist
if (currentStateDoomfist == 14)
if (stateInitedDoomfist == false)
{
    OffBlocking();
    stateInitedDoomfist = true;
}

rule: "state 20: attacking"
Event.OngoingPlayer
Player.Doomfist
if (currentStateDoomfist == 20)
if (stateInitedDoomfist == false)
{
    OffBlocking();
    stateInitedDoomfist = true;
}


// ============== state switching rule =====================

rule: "1 -- crouch button --> 11"
Event.OngoingPlayer
Player.Doomfist
if (currentStateDoomfist == 1)
if (IsButtonHeld(EventPlayer(), Button.Crouch))
if (stateInitedDoomfist == true)
{
    OffIdle();
    currentStateDoomfist = 11;
    stateInitedDoomfist = false;
}

rule: "any state -- use any ability --> 20"
Event.OngoingPlayer
Player.Doomfist
if (IsFiringSecondary(EventPlayer()) || IsUsingAbility1(EventPlayer()) || IsUsingAbility2(EventPlayer()))
if (stateInitedDoomfist == true)
{
    currentStateDoomfist = 20;
    stateInitedDoomfist = false;
}

rule: "any state -- deadly stunned --> 2"
Event.OngoingPlayer
Player.Doomfist
if (HasStatus(EventPlayer(), Status.Stunned))
if (IsDeadlyStunned(EventPlayer()))
if (stateInitedDoomfist == true)
{
    OffIdle();
    currentStateDoomfist = 2;
    stateInitedDoomfist = false;
}

rule: "2 -- un-stunned --> 1"
Event.OngoingPlayer
Player.Doomfist
if (currentStateDoomfist == 2)
if (!HasStatus(EventPlayer(), Status.Stunned))
if (stateInitedDoomfist == true)
{
    currentStateDoomfist = 1;
    stateInitedDoomfist = false;
}

rule: "11 -- 0.2 sec --> 12"
Event.OngoingPlayer
Player.Doomfist
if (currentStateDoomfist == 11)
if (stateInitedDoomfist == true)
{
    Wait(0.2, WaitBehavior.AbortWhenFalse);
    currentStateDoomfist = 12;
    stateInitedDoomfist = false;
}

rule: "12 -- release crouch button --> 13"
Event.OngoingPlayer
Player.Doomfist
if (currentStateDoomfist == 12)
if (!IsButtonHeld(EventPlayer(), Button.Crouch))
if (stateInitedDoomfist == true)
{
    currentStateDoomfist = 13;
    stateInitedDoomfist = false;
}

rule: "13 -- 0.2 sec --> 14"
Event.OngoingPlayer
Player.Doomfist
if (currentStateDoomfist == 13)
if (stateInitedDoomfist == true)
{
    Wait(0.2, WaitBehavior.AbortWhenFalse);
    currentStateDoomfist = 14;
    stateInitedDoomfist = false;
}

rule: "13 -- crouch button --> 12"
Event.OngoingPlayer
Player.Doomfist
if (currentStateDoomfist == 13)
if (IsButtonHeld(EventPlayer(), Button.Crouch))
if (stateInitedDoomfist == true)
{
    currentStateDoomfist = 12;
    stateInitedDoomfist = false;
}

rule: "14 -- 0.3 sec --> 1"
Event.OngoingPlayer
Player.Doomfist
if (currentStateDoomfist == 14)
if (stateInitedDoomfist == true)
{
    Wait(0.3, WaitBehavior.AbortWhenFalse);
    currentStateDoomfist = 1;
    stateInitedDoomfist = false;
}

rule: "14 -- crouch button --> 11"
Event.OngoingPlayer
Player.Doomfist
if (currentStateDoomfist == 14)
if (IsButtonHeld(EventPlayer(), Button.Crouch))
if (stateInitedDoomfist == true)
{
    currentStateDoomfist = 11;
    stateInitedDoomfist = false;
}

rule: "20 -- stop use any ability --> 1"
Event.OngoingPlayer
Player.Doomfist
if (currentStateDoomfist == 20)
if (!IsFiringSecondary(EventPlayer()))
if (!IsUsingAbility1(EventPlayer()))
if (!IsUsingAbility2(EventPlayer()))
if (stateInitedDoomfist == true)
{
    currentStateDoomfist = 1;
    stateInitedDoomfist = false;
}

// =============== other rules =======================
rule: "interact to crouch"
Event.OngoingPlayer
Player.Doomfist
if (IsButtonHeld(EventPlayer(), Button.Interact))
{
    StartHoldingButton(EventPlayer(), Button.Crouch);
}

rule: "un-interact to un-crouch"
Event.OngoingPlayer
Player.Doomfist
if (!IsButtonHeld(EventPlayer(), Button.Interact))
{
    StopHoldingButton(EventPlayer(), Button.Crouch);
}

rule: "show yellow flash when charging secondary fire"
Event.OngoingPlayer
Player.Doomfist
if (IsFiringSecondary(EventPlayer()))
{
    PlayEffect(AllPlayers(), PlayEffect.GoodExplosion, Color.Yellow, EventPlayer(), 2);
}

// ================= debugging ====================

define playervar debugHudDoomfist;

rule: "debug doomfist"
Event.OngoingPlayer
Player.Doomfist
if (IsDebugging())
{
    if (debugHudDoomfist == 0)
    {
        CreateHudText(EventPlayer(), <"status: <0> - initial: <1>", currentStateDoomfist, stateInitedDoomfist>);
        debugHudDoomfist = LastTextID();
    }
}