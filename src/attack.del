/*
code about attack
*/

import "block.del";
import "posture.del";

class AttackingEvent
{
    public define victim;

    public define directDamage;

    // TODO: let each kind of attacking have their own posture damage
    // can be achieved by adding a multiplier (* the multiplier when hitted in blocking)

    public AttackingEvent(define victim, define damage)
    {
        this.victim = victim;
        this.directDamage = damage;
    }
}

define playervar attacking = [];

rule: "add victim to list after attacking, if the victim is not blocking"
Event.OnDamageDealt
if (!IsBlocking(Victim()) && !IsDeflecting(Victim()))
{
    if (HeroOf(Attacker()) == Hero.Doomfist && IsUsingAbility2(Attacker()))
    {
        // doomfist's ability 2: deal 1/2 damage
        attacking = Append(attacking, new AttackingEvent(Victim(), EventDamage() / 2));
    }
    else if (HeroOf(Attacker()) == Hero.Doomfist && IsUsingAbility1(Attacker()))
    {
        // doomfist's ability 1: deal no damage
        Heal(Victim(), null, EventDamage());
        if (!IsOnGround(Victim()))
        {
            // deal 150 posture damage if not on the ground
            GainPosture(Victim(), 150, Attacker());
        }
    }
    else
    {
        attacking = Append(attacking, new AttackingEvent(Victim(), EventDamage()));
    }
}

rule: "gain posture if victim is deflecting"
Event.OnDamageDealt
if (IsDeflecting(Victim()))
{
    if (HeroOf(Attacker()) == Hero.Doomfist && IsUsingAbility1(Attacker()))
    {
        // doomfist's ability 1: deal no damage
        Heal(Victim(), null, EventDamage());
    }
    else
    {
        Heal(Victim(), null, EventDamage());
        GainPosture(Attacker(), EventDamage() * 2, Victim());
        PlayEffect(AllPlayers(), PlayEffect.ExplosionSound, Color.White, Victim(), 100);
        PlayEffect(AllPlayers(), PlayEffect.ExplosionSound, Color.White, Victim(), 100);
        PlayEffect(AllPlayers(), PlayEffect.ExplosionSound, Color.White, Victim(), 100);
        PlayEffect(AllPlayers(), PlayEffect.ExplosionSound, Color.White, Victim(), 100);
    }
}

rule: "deal posture if victim is blocking"
Event.OnDamageDealt
if (IsBlocking(Victim()) && !IsDeflecting(Victim()))
{
    if (HeroOf(Attacker()) == Hero.Doomfist && IsUsingAbility2(Attacker()))
    {
        // doomfist's ability 2: deal 2X posture damage
        Heal(Victim(), null, EventDamage());
        GainPosture(Victim(), EventDamage() * 2, Attacker());
    }
    else if (HeroOf(Attacker()) == Hero.Doomfist && IsUsingAbility1(Attacker()))
    {
        // doomfist's ability 1: deal no damage
        Heal(Victim(), null, EventDamage());
    }
    else
    {
        Heal(Victim(), null, EventDamage());
        GainPosture(Victim(), EventDamage(), Attacker());
    }
}

rule: "start checking victim state after a short delay"
Event.OngoingPlayer
if (CountOf(attacking) > 0)
{
    if (HeroOf(EventPlayer()) == Hero.Doomfist)
    {
        Wait(0.15);
    }
    else
    {
        Wait(0.1);
    }

    // cannot hurt more than 3 persons at once, so the loop is acceptable.
    foreach (AttackingEvent e in attacking)
    {
        if (IsDeflecting(e.victim))
        {
            // deflecting
            Heal(e.victim, null, e.directDamage);
            GainPosture(EventPlayer(), e.directDamage * 2, e.victim);
            PlayEffect(AllPlayers(), PlayEffect.ExplosionSound, Color.White, e.victim, 100);
            PlayEffect(AllPlayers(), PlayEffect.ExplosionSound, Color.White, e.victim, 100);
            PlayEffect(AllPlayers(), PlayEffect.ExplosionSound, Color.White, e.victim, 100);
            PlayEffect(AllPlayers(), PlayEffect.ExplosionSound, Color.White, e.victim, 100);
        }
        else
        {
            GainPosture(e.victim, e.directDamage, EventPlayer());
        }

        delete(e);
    }

    attacking = [];
}