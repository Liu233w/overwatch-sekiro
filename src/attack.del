/*
code about attack
*/

import "block.del";
import "posture.del";
import "state-track.del";

struct AttackingEvent
{
    public define victim;

    public define directDamage;

    // TODO: let each kind of attacking have their own posture damage
    // can be achieved by adding a multiplier (* the multiplier when hitted in blocking)

    public define extraPostureDamageWhenDirectlyHitted = 0;
    public define extraPostureDamageWhenDeflected = 0;

    public AttackingEvent(define victim, define damage)
    {
        this.victim = victim;
        this.directDamage = damage;
    }
}

AttackingEvent playervar attacking T = [];
define playervar attackingListSize S = 0;

rule: "add victim to list after attacking, if the victim is not blocking"
Event.OnDamageDealt
if (Attacker() != null)
if (HeroOf(Attacker()) != Hero.Ashe || IsUsingAbility1(Attacker()))
if (!IsBlocking(Victim()) && !IsDeflecting(Victim()))
{
    if (HeroOf(Attacker()) == Hero.Doomfist && IsUsingAbility2(Attacker()))
    {
        // doomfist's ability 2: deal 1/2 damage
        Heal(Victim(), null, EventDamage() / 2);
        attacking[attackingListSize] = new AttackingEvent(Victim(), EventDamage() / 2);
        attackingListSize += 1;
    }
    else if (HeroOf(Attacker()) == Hero.Doomfist && IsUsingAbility1(Attacker()))
    {
        // doomfist's ability 1: deal no damage
        Heal(Victim(), null, EventDamage());
        if (AltitudeOf(Victim()) > 1)
        {
            // deal 150 posture damage if not on the ground
            GainPosture(Victim(), 150, Attacker());
        }
    }
    else if (HeroOf(Attacker()) == Hero.Genji && IsUsingAbility1(Attacker()))
    {
        // genji's ability 1: deal no damage or posture
        Heal(Victim(), null, EventDamage());
    }
    else if (HeroOf(Attacker()) == Hero.Reinhardt && AtAbility2State(Attacker()))
    {
        // reinhardt's ability 2: deal no damage, but 200 posture when hitted.
        Heal(Victim(), null, EventDamage());
        AttackingEvent e = new AttackingEvent(Victim(), 0);
        e.extraPostureDamageWhenDirectlyHitted = 200;
        attacking[attackingListSize] = e;
        attackingListSize += 1;
    }
    else if (HeroOf(Attacker()) == Hero.Reinhardt && IsUsingAbility1(Attacker()))
    {
        // reinhardt's ability 1: deal no damage, but 200 posture when hitted.
        // if deflected, gain 200 posture damage
        Heal(Victim(), null, EventDamage());
        AttackingEvent e = new AttackingEvent(Victim(), 0);
        e.extraPostureDamageWhenDirectlyHitted = 200;
        e.extraPostureDamageWhenDeflected = 200;
        attacking[attackingListSize] = e;
        attackingListSize += 1;

        // stop reinhardt
        SetStatus(Attacker(), null, Status.KnockedDown, 0.5);
    }
    else if (HeroOf(Attacker()) == Hero.Mercy)
    {
        AttackingEvent e = new AttackingEvent(Victim(), EventDamage());
        // mercy deal extra 50 posture damage if victim's posture reaches 150
        if (Posture(Victim()) >= 150)
        {
            e.extraPostureDamageWhenDirectlyHitted = 50 - EventDamage();
        }
        // mercy receive 150 posture damage if deflected
        e.extraPostureDamageWhenDeflected = 150 - EventDamage();

        attacking[attackingListSize] = e;
        attackingListSize += 1;
    }
    else if (HeroOf(Victim()) == Hero.Mercy)
    {
        AttackingEvent e = new AttackingEvent(Victim(), EventDamage());
        // mercy will set attacker's posture to 150 if it's not reached 150
        if (Posture(Victim()) + EventDamage() < 150)
        {
            e.extraPostureDamageWhenDeflected = 150 - Posture(Victim()) - EventDamage();
        }
        attacking[attackingListSize] = e;
        attackingListSize += 1;
    }
    else
    {
        attacking[attackingListSize] = new AttackingEvent(Victim(), EventDamage());
        attackingListSize += 1;
    }
}

rule: "gain posture if victim is deflecting"
Event.OnDamageDealt
if (Attacker() != null)
if (HeroOf(Attacker()) != Hero.Ashe || IsUsingAbility1(Attacker()))
if (IsDeflecting(Victim()))
{
    if (HeroOf(Attacker()) == Hero.Doomfist && IsUsingAbility1(Attacker()))
    {
        // doomfist's ability 1: deal no damage
        Heal(Victim(), null, EventDamage());
    }
    else if (HeroOf(Attacker()) == Hero.Genji && IsUsingAbility1(Attacker()))
    {
        // genji's ability 1: cannot be deflected
        Heal(Victim(), null, EventDamage());
    }
    else if (HeroOf(Attacker()) == Hero.Reinhardt && AtAbility2State(Attacker()))
    {
        // reinhardt's ability 2: do nothing
        Heal(Victim(), null, EventDamage());
    }
    else if (HeroOf(Attacker()) == Hero.Reinhardt && IsUsingAbility1(Attacker()))
    {
        // reinhardt's ability 1: gain 200 posture damage
        Heal(Victim(), null, EventDamage());
        GainPosture(Attacker(), 200, Victim()); // it can stun attack immediately
        PlayEffect(AllPlayers(), PlayEffect.ExplosionSound, Color.White, Victim(), 100);
        PlayEffect(AllPlayers(), PlayEffect.ExplosionSound, Color.White, Victim(), 100);
        PlayEffect(AllPlayers(), PlayEffect.ExplosionSound, Color.White, Victim(), 100);
        PlayEffect(AllPlayers(), PlayEffect.ExplosionSound, Color.White, Victim(), 100);

        OnSucceedDeflecting(Victim());
    }
    else if (HeroOf(Attacker()) == Hero.Mercy)
    {
        // mercy cannot be deflected
        Heal(Victim(), null, EventDamage());
    }
    else if (HeroOf(Victim()) == Hero.Mercy)
    {
        // mercy will set attacker's posture to 150 if it's not reached 150
        Heal(Victim(), null, EventDamage());
        if (Posture(Attacker()) < 150)
        {
            GainPosture(Attacker(), 150 - Posture(Attacker()), Victim());
        }
        PlayEffect(AllPlayers(), PlayEffect.ExplosionSound, Color.White, Victim(), 100);
        PlayEffect(AllPlayers(), PlayEffect.ExplosionSound, Color.White, Victim(), 100);
        PlayEffect(AllPlayers(), PlayEffect.ExplosionSound, Color.White, Victim(), 100);
        PlayEffect(AllPlayers(), PlayEffect.ExplosionSound, Color.White, Victim(), 100);

        OnSucceedDeflecting(Victim());
    }
    else
    {
        Heal(Victim(), null, EventDamage());
        GainPosture(Attacker(), EventDamage(), Victim());
        PlayEffect(AllPlayers(), PlayEffect.ExplosionSound, Color.White, Victim(), 100);
        PlayEffect(AllPlayers(), PlayEffect.ExplosionSound, Color.White, Victim(), 100);
        PlayEffect(AllPlayers(), PlayEffect.ExplosionSound, Color.White, Victim(), 100);
        PlayEffect(AllPlayers(), PlayEffect.ExplosionSound, Color.White, Victim(), 100);

        OnSucceedDeflecting(Victim());
    }
}

rule: "deal posture if victim is blocking"
Event.OnDamageDealt
if (Attacker() != null)
if (HeroOf(Attacker()) != Hero.Ashe || IsUsingAbility1(Attacker()))
if (IsBlocking(Victim()) && !IsDeflecting(Victim()))
{
    if (HeroOf(Attacker()) == Hero.Doomfist && IsUsingAbility2(Attacker()))
    {
        // doomfist's ability 2: deal 2X posture damage
        Heal(Victim(), null, EventDamage());
        GainPosture(Victim(), EventDamage() * 2, Attacker());
    }
    else if (HeroOf(Attacker()) == Hero.Doomfist && IsUsingAbility1(Attacker()))
    {
        // doomfist's ability 1: deal no damage
        Heal(Victim(), null, EventDamage());
    }
    else if (HeroOf(Attacker()) == Hero.Genji && IsUsingAbility1(Attacker()))
    {
        // genji's ability 1: deal no posture damage
        Heal(Victim(), null, EventDamage());
    }
    else if (HeroOf(Attacker()) == Hero.Reinhardt && AtAbility2State(Attacker()))
    {
        // reinhardt's ability 2: do nothing
        Heal(Victim(), null, EventDamage());
    }
    else if (HeroOf(Attacker()) == Hero.Reinhardt && IsUsingAbility1(Attacker()))
    {
        // reinhardt's ability 1: knockdown reinhardt, deal reinhardt posture
        Heal(Victim(), null, EventDamage());
        GainPosture(Attacker(), 150, Victim());
        SetStatus(Attacker(), Victim(), Status.KnockedDown, 2);
    }
    else
    {
        Heal(Victim(), null, EventDamage());
        GainPosture(Victim(), EventDamage() / 2, Attacker());
    }
}

rule: "start checking victim state after a short delay"
Event.OngoingPlayer
if (attackingListSize > 0)
{
    if (HeroOf(EventPlayer()) == Hero.Doomfist)
    {
        Wait(0.15, WaitBehavior.AbortWhenFalse);
    }
    else
    {
        Wait(0.1, WaitBehavior.AbortWhenFalse);
    }

    // use another variable to prevent add new element while loop on old elements
    define attackingList = attacking;
    attacking = [];
    attackingListSize = 0;

    foreach (AttackingEvent e in attackingList)
    {
        if (InCounterAttack(e.victim) && IsCounterAttacked(e.victim, EventPlayer()))
        {

            SetPosture(e.victim, 0);
            Heal(e.victim, null, 150 + e.directDamage);
            // that can stun the attacker
            GainPosture(EventPlayer(), 300, e.victim);
        }
        else if (IsDeflecting(e.victim) || IsBlocking(e.victim))
        {
            // deflecting
            Heal(e.victim, null, e.directDamage);
            GainPosture(EventPlayer(), e.directDamage + e.extraPostureDamageWhenDeflected, e.victim);
            PlayEffect(AllPlayers(), PlayEffect.ExplosionSound, Color.White, e.victim, 100);
            PlayEffect(AllPlayers(), PlayEffect.ExplosionSound, Color.White, e.victim, 100);
            PlayEffect(AllPlayers(), PlayEffect.ExplosionSound, Color.White, e.victim, 100);
            PlayEffect(AllPlayers(), PlayEffect.ExplosionSound, Color.White, e.victim, 100);

            OnSucceedDeflecting(e.victim);
        }
        else
        {
            GainPosture(e.victim, e.directDamage + e.extraPostureDamageWhenDirectlyHitted, EventPlayer());
        }
    }

    Loop();
}