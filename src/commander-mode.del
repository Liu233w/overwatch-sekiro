import "block.del";
import "settings.del";
import "posture.del";

rule: "disable win rule"
{
    DisableCompletion();
    DisableAnnouncer();
}

rule: "only slot 0 and 5 is allowed to choose roadhog"
Event.OnPlayerJoin
Player.Slot0
{
    SetHeroRoster(EventPlayer(), Hero.Roadhog);
}

rule: "only slot 0 and 5 is allowed to choose roadhog"
Event.OnPlayerJoin
Player.Slot5
{
    SetHeroRoster(EventPlayer(), Hero.Roadhog);
}

define globalvar final = false;

rule: "not final at the beginning, then set final after 3 minutes"
if (IsGameInProgress())
if (!final)
{
    final = false;
    Wait(60 * 2.5);
    final = true;
    BigMessage(AllPlayers(), "final_phase");
}

rule: "if roadhog is close enough, set final phrase immediately"
if (IsGameInProgress())
if (DistanceBetween(PlayersOnHero(Hero.Roadhog, Team.Team1)[0], PlayersOnHero(Hero.Roadhog, Team.Team2)[0]) <= 20)
{
    final = true;
    BigMessage(AllPlayers(), "final_phase");
}

rule: "commander remove all abilities and set max health"
Event.OngoingPlayer
Player.Roadhog
{
    SetPrimaryFireEnabled(EventPlayer(), false);
    SetSecondaryFireEnabled(EventPlayer(), false);
    SetAbility1Enabled(EventPlayer(), false);
    SetAbility2Enabled(EventPlayer(), false);
    SetUltimateAbilityEnabled(EventPlayer(), false);

    SetMaxHealth(EventPlayer(), 600);
    SetMaxPosture(EventPlayer(), 2400);

    SetDamageDealt(EventPlayer(), 800);

    OnIdle(EventPlayer());
}

rule: "commander be slow when not in final"
Event.OngoingPlayer
Player.Roadhog
if (IsGameInProgress())
if (!IsInSpawnRoom())
if (!final)
{
    SetMoveSpeed(EventPlayer(), 15);
}

rule: "commander be quick in final, and make health less"
Event.OngoingPlayer
Player.Roadhog
if (final)
{
    ClearStatus(EventPlayer(), Status.PhasedOut);
    ClearStatus(EventPlayer(), Status.Asleep);
    ClearStatus(EventPlayer(), Status.Rooted);
    SetStatus(EventPlayer(), null, Status.Hacked, 0.1);

    MinWait();

    SetHealth(EventPlayer(), Health(EventPlayer()) * 1/6);
    SetMaxHealth(EventPlayer(), 100);
    SetMoveSpeed(EventPlayer(), 200);

    SetPrimaryFireEnabled(EventPlayer(), true);

    // commander sticked
    if (IsInSpawnRoom(EventPlayer()))
    {
        Teleport(EventPlayer(), ObjectivePosition());
    }
}

rule: "kill hostile commander to win"
Event.OnDeath
Player.Roadhog
{
    DeclareRoundVictory(OppositeTeamOf(TeamOf(EventPlayer())));
}

rule: "show commander's location"
Event.OngoingPlayer
if (IsGameInProgress())
{
    define friendlyCommander = PlayersOnHero(Hero.Roadhog, TeamOf(EventPlayer()))[0];
    define enemyCommander = PlayersOnHero(Hero.Roadhog,OppositeTeamOf(TeamOf(EventPlayer())))[0];
    CreateIcon(EventPlayer(), friendlyCommander, Icon.Heart, IconRev.VisibleToAndPosition, Color.Blue, true);
    CreateIcon(EventPlayer(), enemyCommander, Icon.Skull, IconRev.VisibleToAndPosition, Color.Red, true);
}

rule: "show objective health and posture"
Event.OngoingPlayer
{
    CreateHudText(EventPlayer(), <"teammate: life <0>", 
        Health(PlayersOnHero(Hero.Roadhog, TeamOf(EventPlayer()))[0])>);
    CreateHudText(EventPlayer(), <"enemy: life <0>", 
        Health(PlayersOnHero(Hero.Roadhog, OppositeTeamOf(TeamOf(EventPlayer())))[0])>);
}

rule: "if current posture > 1/2, commander stop moving and use ultimate 10 sec, then sleep commander"
Event.OngoingPlayer
Player.Roadhog
if (Posture(EventPlayer()) > 1200 && !final)
{
    SetStatus(EventPlayer(), null, Status.Rooted, 10);
    SetUltimateAbilityEnabled(EventPlayer(), true);
    MinWait();
    SetUltimateCharge(EventPlayer(), 100);
    MinWait();
    PressButton(EventPlayer(), Button.Ultimate);
    
    BigMessage(AllPlayers(), <"<0> use_ultimate_ability", HeroIconString(Hero.Roadhog)>);

    Wait(10);

    SetPosture(EventPlayer(), 0);
    SetUltimateAbilityEnabled(EventPlayer(), false);
    SetStatus(EventPlayer(), null, Status.Asleep, 20);
    SetStatus(EventPlayer(), null, Status.PhasedOut, 20);
}

rule: "prevent commander from dead by cliff"
Event.OngoingPlayer
Player.Roadhog
if (IsInAir(EventPlayer()))
{
    Teleport(EventPlayer(), NearestWalkablePosition(PositionOf(EventPlayer())));
}

rule: "prevent commander from healed by mercy"
Event.OnHealingTaken
Player.Roadhog
if (HeroOf(Healer()) == Hero.Mercy)
{
    Damage(EventPlayer(), null, EventHealing());
}