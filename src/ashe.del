// ashe don't need a state machine

import "state-track.del";
import "block.del";
import "optimise.del";
import "posture.del";

rule: "initialize ashe"
Event.OngoingPlayer
Player.Ashe
{
    ContinueWhenServerLoadAcceptable();

    SetAbility2Enabled(EventPlayer(), false);
    SetUltimateAbilityEnabled(EventPlayer(), false);
    SetSecondaryFireEnabled(EventPlayer(), false);
}

rule: "set idle on alive"
Event.OngoingPlayer
Player.Ashe
if (IsAlive(EventPlayer()))
{
    SetPrimaryFireEnabled(EventPlayer(), true);
    SetAbility1Enabled(EventPlayer(), true);
    OnIdle(EventPlayer());
}

rule: "off idle when dead"
Event.OngoingPlayer
Player.Ashe
if (!IsAlive(EventPlayer()))
{
    OffIdle(EventPlayer());
}

rule: "set counter attack when using shift"
Event.OngoingPlayer
Player.Ashe
if (IsUsingAbility1(EventPlayer()) || IsFiringPrimary(EventPlayer()))
if (IsAlive(EventPlayer()))
{
    // totally 0.5 sec counter attack time
    SetInCounterAttack(EventPlayer());
    SetPrimaryFireEnabled(EventPlayer(), false);
    Wait(0.2);
    SetAbility1Enabled(EventPlayer(), false);
    Wait(0.3);
    SetOffCounterAttack(EventPlayer());
}

rule: "enable shift when on the ground and off counter attack"
Event.OngoingPlayer
Player.Ashe
if (IsOnGround(EventPlayer()))
if (!InCounterAttack(EventPlayer()))
{
    SetAbility1Enabled(EventPlayer(), true);
    SetPrimaryFireEnabled(EventPlayer(), true);
}

rule: "ashe attacking player: add them to counter attack list"
Event.OnDamageDealt
if (Attacker() != null)
if (HeroOf(Attacker()) == Hero.Ashe)
// if (InCounterAttack(EventPlayer()))
{
    Heal(Victim(), null, EventDamage());
    AddCounterAttackPlayer(Attacker(), Victim());
}

rule: "ashe can fly when using ability 1 on the air"
Event.OngoingPlayer
Player.Ashe
if (IsUsingAbility1(EventPlayer()))
if (IsAlive(EventPlayer()))
if (IsInAir(EventPlayer()))
{
    Wait(0.1, WaitBehavior.AbortWhenFalse);
    define facingDirection = FacingDirectionOf(EventPlayer());
    // speed will be lower when player pointing at the ground, prevent player from flying too high.
    define speed = YOf(facingDirection) < -0.7 ? 15 : 20;
    ApplyImpulse(EventPlayer(), facingDirection * -1, speed, Relative.ToWorld, ContraryMotion.Cancel);
}

rule: "ashe use secondary attack as ability 1"
Event.OngoingPlayer
Player.Ashe
if (IsButtonHeld(EventPlayer(), Button.SecondaryFire))
{
    PressButton(EventPlayer(), Button.Ability1);
}