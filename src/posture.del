/*
posture system (also handle hit point)

everyone have 200 posture

taken damage amount of posture when directly hitted;
taken 1/2 damage amount of posture when blocked;
cause damage amount of posture to attacker if you deflect a attack.

Posture recover speed:
when you are full health: 25 per second (8 second to clean up posture)
health reduce to 4/5: 20 per second
health reduce to 2/5: 10 per second (the rate is not related to the scale of health, but assigned when reaching the threshold)

when blocking: have a double recover speed

only when you are in idle or blocking can you recover posture.
stop recovering for 1 second every time you are hitted in idle.
stop recovering for 2 second every time you are hitted in blocking.
*/

import "block.del";
import "settings.del";

// ================= posture gaining ========================

define playervar posture = 0;
define playervar lastPostureAttacker; // the last enemy who deal posture damage to certain player

rule: "set posture to 0 when spawned"
Event.OngoingPlayer
if (IsAlive(EventPlayer()))
{
    posture = 0;
}

// functions sealed posture calculation

method GainPosture(define player, define postureAdded, define dealer)
{
    player.posture += postureAdded;
    player.lastPostureAttacker = dealer;
}

macro Posture(define player): player.posture;

method SetPosture(define player, define number)
{
    player.posture = number;
}

// ================== posture restoring =======================

define playervar postureRestoringRate = 0;

rule: "manually chase posture variable rest-ore"
{
    // the ChaseVariableAtRate is lack of performance, use a loop instead
    for (define i = 0; i < 12; i++)
    {
        define player = AllPlayers()[i];
        player.posture -= player.postureRestoringRate * 0.5;
        if (player.posture < 0)
        {
            player.posture = 0;
        }
    }
    Wait(0.5);
    Loop();
}

rule: "stop recovering posture when not in idle or blocking"
Event.OngoingPlayer
if (!IsIdle(EventPlayer()) && !IsBlocking(EventPlayer()))
{
    postureRestoringRate = 0;
}

method ResolvePostureRecoveringRate()
{
    if (Health(EventPlayer()) > (4/5 * MaxHealth(EventPlayer())))
    {
        return 25;
    }
    else if (Health(EventPlayer()) > (2/5 * MaxHealth(EventPlayer())))
    {
        return 20;
    }
    else
    {
        return 10;
    }
}

rule: "recovering posture when at idle"
Event.OngoingPlayer
if (IsIdle(EventPlayer()))
if (postureRestoringRate == 0)
{
    Wait(1, WaitBehavior.AbortWhenFalse);
    postureRestoringRate = ResolvePostureRecoveringRate();
}

rule: "recovering posture when at blocking"
Event.OngoingPlayer
if (IsBlocking(EventPlayer()))
if (postureRestoringRate == 0)
{
    Wait(2, WaitBehavior.AbortWhenFalse);
    postureRestoringRate = ResolvePostureRecoveringRate() * 2;
}

rule: "pause recovering when hitted"
Event.OnDamageTaken
{
    // restart the timer of the rule above
    postureRestoringRate = 0.01;
    MinWait();

    // pause recovering
    postureRestoringRate = 0;

    // it will trigger the rule above, to start recovering after certain seconds
}

// ============ status trigger ===================

define playervar deadlyStunned; // when in this status, a simple attack can kill the player

macro IsDeadlyStunned(define player): player.deadlyStunned == true;

rule: "clear deadly stunned and set unkillable when not stunned"
Event.OngoingPlayer
if (!HasStatus(EventPlayer(), Status.Stunned))
{
    SetStatus(EventPlayer(), null, Status.Unkillable, 9999);
    deadlyStunned = false;
}

private method SetDeadlyStunned(define duration)
{
    ClearStatus(EventPlayer(), Status.Unkillable);
    PlayEffect(AllPlayers(), PlayEffect.RingExplosionSound, Color.White, EventPlayer(), 100);
    SetStatus(EventPlayer(), null, Status.Stunned, duration);
    deadlyStunned = true;
}

rule: "stunned 3 seconds after health is 1"
Event.OngoingPlayer
if (Health(EventPlayer()) == 1)
if (deadlyStunned != true)
{
    // wait 0.25 sec to see if he can regain health (wait for deflect)
    Wait(0.25, WaitBehavior.AbortWhenFalse);
    SetDeadlyStunned(3);
}

rule: "kill the player after 2.5 sec in 1 health stunned status"
Event.OngoingPlayer
if (deadlyStunned == true)
if (Health(EventPlayer()) == 1)
if (IsAlive(EventPlayer()))
{
    Wait(2.5, WaitBehavior.AbortWhenFalse);
    Kill(EventPlayer(), lastPostureAttacker);
}

rule: "stun player 2 seconds when posture is filled"
Event.OngoingPlayer
if (posture >= MaxPosture(EventPlayer()))
{
    SetDeadlyStunned(2);
    posture = 0; // clear posture
    // give attacker immutable
    SetStatus(lastPostureAttacker, null, Status.Invincible, 2);
}

rule: "dead instantly when hitted in stunned, recover attacker 2/3 health and 150 posture"
Event.OnDamageTaken
if (deadlyStunned == true)
{
    // ClearStatus(EventPlayer(), Status.Stunned);
    // MinWait();
    Kill(Victim(), Attacker());
    if (HeroOf(Attacker()) != Hero.Roadhog)
    {
        Heal(Attacker(), null, MaxHealth(Attacker()) * 2 / 3);
    }

    if (HeroOf(Attacker()) != Hero.Roadhog)
    {
        Attacker().posture -= 150;
        if (Attacker().posture < 0)
        {
            Attacker().posture = 0;
        }
    }
}

// ==================== hud =====================

define playervar inWorldPostureText = 0;
define playervar postureHud = 0;

private method PostureHud(Color color)
{
    if (inWorldPostureText != 0)
    {
        DestroyInWorldText(inWorldPostureText);
    }
    if (postureHud != 0)
    {
        DestroyHudText(postureHud);
    }
    // MinWait();

    CreateInWorldText(AllPlayers(), <"<0>%", (posture / MaxPosture(EventPlayer())) * 100>, EventPlayer(), 1, 
        Clipping.ClipAgainstSurfaces, InworldTextRev.VisibleToPositionAndString, color);
    inWorldPostureText = LastTextID();

    CreateHudText(EventPlayer(), <"defend: <0>%", (posture / MaxPosture(EventPlayer())) * 100>, null, null, Location.Left, 0, color);
    postureHud = LastTextID();
}

rule: "show white posture text when posture < 100"
Event.OngoingPlayer
if (posture < MaxPosture(EventPlayer()) / 2)
{
    PostureHud(Color.White);
}

rule: "show orange posture text when posture on 100~150"
Event.OngoingPlayer
if (posture >= MaxPosture(EventPlayer()) / 2)
if (posture < MaxPosture(EventPlayer()) * 3 / 4)
{
    PostureHud(Color.Orange);
}

rule: "show red posture text when posture > 150"
Event.OngoingPlayer
if (posture >= MaxPosture(EventPlayer()) * 3 / 4)
{
    PostureHud(Color.Red);
}