// reinhardt don't need a state machine

import "state-track.del";
import "block.del";

rule: "initialize reinhardt"
Event.OngoingPlayer
Player.Reinhardt
if (IsAlive(EventPlayer()))
{
    MinWait();
    SetPrimaryFireEnabled(EventPlayer(), true);
    SetAbility1Enabled(EventPlayer(), true);
    SetAbility2Enabled(EventPlayer(), true);

    SetDamageDealt(EventPlayer(), 50);

    OnIdle(EventPlayer());
}

rule: "release shift button to stop charging"
Event.OngoingPlayer
Player.Reinhardt
if (!IsButtonHeld(EventPlayer(), Button.Ability1))
if (IsUsingAbility1(EventPlayer()))
{
    SetStatus(EventPlayer(), null, Status.Hacked, 0.1);

    // 2s cd if manually canceled
    SetPrimaryFireEnabled(EventPlayer(), false);
    SetAbility1Enabled(EventPlayer(), false);
    SetAbility2Enabled(EventPlayer(), false);

    Wait(2);

    SetPrimaryFireEnabled(EventPlayer(), true);
    SetAbility1Enabled(EventPlayer(), true);
    SetAbility2Enabled(EventPlayer(), true);
}

rule: "the trigger of e attack"
Event.OngoingPlayer
Player.Reinhardt
if (IsUsingAbility2(EventPlayer()))
{
    // only e ability stop reinhardt restore posture
    OffIdle(EventPlayer());

    SetAtAbility2State(EventPlayer(), true);

    SetPrimaryFireEnabled(EventPlayer(), false);
    SetAbility1Enabled(EventPlayer(), false);
    SetAbility2Enabled(EventPlayer(), false);

    Wait(3);

    OnIdle(EventPlayer());

    SetAtAbility2State(EventPlayer(), false);

    SetPrimaryFireEnabled(EventPlayer(), true);
    SetAbility1Enabled(EventPlayer(), true);
    SetAbility2Enabled(EventPlayer(), true);
}
