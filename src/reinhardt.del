// reinhardt don't need a state machine

import "state-track.del";
import "block.del";
import "optimise.del";

rule: "initialize reinhardt"
Event.OngoingPlayer
Player.Reinhardt
{
    ContinueWhenServerLoadAcceptable();

    AllowButton(EventPlayer(), Button.Ability1);
    AllowButton(EventPlayer(), Button.Ability2);
    SetUltimateAbilityEnabled(EventPlayer(), false);
    AllowButton(EventPlayer(), Button.PrimaryFire);
    DisallowButton(EventPlayer(), Button.SecondaryFire);

    SetDamageDealt(EventPlayer(), 50);
}

rule: "set idle on alive"
Event.OngoingPlayer
Player.Reinhardt
if (IsAlive(EventPlayer()))
{
    OnIdle(EventPlayer());
}

rule: "off idle when dead"
Event.OngoingPlayer
Player.Reinhardt
if (!IsAlive(EventPlayer()))
{
    OffIdle(EventPlayer());
}

rule: "deal damage to player nearby when charging"
Event.OngoingPlayer
Player.Reinhardt
if (IsUsingAbility1(EventPlayer()))
{
    // do not start calculation immediately
    Wait(0.2, WaitBehavior.AbortWhenFalse);
    // this will trigger the damage dealt event
    while (true)
    {
        Damage(
            PlayersWithinRadius(PositionOf(EventPlayer()), 2, OppositeTeamOf(TeamOf(EventPlayer())), RadiusLOS.SurfacesAndEnemyBarriers),
            EventPlayer(),
            1
            );
        Wait(0.016, WaitBehavior.AbortWhenFalse);
    }
}

rule: "release shift button to stop charging"
Event.OngoingPlayer
Player.Reinhardt
if (!IsButtonHeld(EventPlayer(), Button.Ability1))
if (IsUsingAbility1(EventPlayer()))
{
    SetStatus(EventPlayer(), null, Status.Hacked, 0.1);

    // 2s cd if manually canceled
    DisallowButton(EventPlayer(), Button.PrimaryFire);
    DisallowButton(EventPlayer(), Button.Ability1);
    DisallowButton(EventPlayer(), Button.Ability2);

    Wait(2);

    AllowButton(EventPlayer(), Button.PrimaryFire);
    AllowButton(EventPlayer(), Button.Ability1);
    AllowButton(EventPlayer(), Button.Ability2);
}

rule: "the trigger of e attack"
Event.OngoingPlayer
Player.Reinhardt
if (IsUsingAbility2(EventPlayer()))
{
    // only e ability stop reinhardt restore posture
    OffIdle(EventPlayer());

    SetAtAbility2State(EventPlayer(), true);

    DisallowButton(EventPlayer(), Button.PrimaryFire);
    DisallowButton(EventPlayer(), Button.Ability1);
    DisallowButton(EventPlayer(), Button.Ability2);

    Wait(3);

    OnIdle(EventPlayer());

    SetAtAbility2State(EventPlayer(), false);

    AllowButton(EventPlayer(), Button.PrimaryFire);
    AllowButton(EventPlayer(), Button.Ability1);
    AllowButton(EventPlayer(), Button.Ability2);
}
